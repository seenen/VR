// Source code by Shawn Halayka
// Source code is in the public domain


#include "quaternion_julia_set.h"
#include "mesh.h"


int main(int argc, char **argv)
{
	if(argc != 1 && argc != 2)
	{
		cout << "Example usage: qjs [-cpu]" << endl;
		return 1;
	}

	// Try using the GPU by default.
	bool try_gpu = true;
	
	if(argc == 2)
	{
		string arg = lower_string(string(argv[1]));
		
		if("-cpu" == arg || "/cpu" == arg || "cpu" == arg)
			try_gpu = false;
		else
		{
			cout << "Example usage: qjs [-cpu]" << endl;
			return 1;
		}
	}

	quaternion_julia_set qjs;

	if(false == qjs.load_parameters_from_file("config.txt"))
	{
		cout << "Error reading config.txt -- try using the following sample config.txt file:" << endl;
		cout << "100     // Grid resolution (an unsigned integer)" << endl;
		cout << "-1.5    // Grid minimum extent (a real number)" << endl;
		cout << "1.5     // Grid maximum extent (a real number)" << endl;
		cout << "8       // Maximum iterations (an unsigned integer)" << endl;
		cout << "4.0     // Threshold (a real number)" << endl;
		cout << "0.0     // Z.w (a real number)" << endl;
		cout << "0.3     // C.x (a real number)" << endl;
		cout << "0.5     // C.y (a real number)" << endl;
		cout << "0.4     // C.z (a real number)" << endl;
		cout << "0.2     // C.w (a real number)" << endl;
		cout << "Z = sin(Z) + C * sin(Z)	// Iterative equation" << endl;

		return 1;
	}

	if(false == qjs.generate_and_write_isosurface_to_binary_stl_file("out.stl", try_gpu, true))
	{
		cout << "Could not write to binary STL file: out.stl" << endl;
		return 2;
	}

	cout << "\nPost-processing mesh to eliminate cracks generated by Marching Cubes" << endl;
	
	indexed_mesh m;

	if(m.load_from_binary_stereo_lithography_file("out.stl", false))
	{
		cout << endl;
		m.fix_cracks();

		cout << endl;
		m.save_to_binary_stereo_lithography_file("out.stl");
	}

	return 0;
}


